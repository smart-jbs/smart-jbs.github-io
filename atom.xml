<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://smart-jbs.github.io/</id>
    <title>呆萌男神森森的博客儿</title>
    <updated>2020-12-17T13:46:16.735Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://smart-jbs.github.io/"/>
    <link rel="self" href="https://smart-jbs.github.io/atom.xml"/>
    <subtitle>求知若饥，大智若愚</subtitle>
    <logo>https://smart-jbs.github.io/images/avatar.png</logo>
    <icon>https://smart-jbs.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 呆萌男神森森的博客儿</rights>
    <entry>
        <title type="html"><![CDATA[第零章-代码规范与语言基础]]></title>
        <id>https://smart-jbs.github.io/post/di-ling-zhang-dai-ma-gui-fan-yu-yu-yan-ji-chu/</id>
        <link href="https://smart-jbs.github.io/post/di-ling-zhang-dai-ma-gui-fan-yu-yu-yan-ji-chu/">
        </link>
        <updated>2020-12-17T13:18:52.000Z</updated>
        <content type="html"><![CDATA[<h1 id="第零章-代码规范与语言基础">第零章 代码规范与语言基础</h1>
<h2 id="代码默认规则">代码默认规则</h2>
<h4 id="二叉树节点">二叉树节点</h4>
<pre><code class="language-java">public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    
    TreeNode(int val){
        this.val = val;
        this.left = null;
        this.right = null;
    }
}
TreeNode node = new TreeNode(2);
node.val = 4;
node.left = node2;
</code></pre>
<h4 id="单链表">单链表</h4>
<pre><code class="language-java">class ListNode {
    int val;
    ListNOde next;
    
    ListNode(int val){
        this.val = val;
        this.next = null;
    }
}
</code></pre>
<h2 id="语言基础">语言基础</h2>
<h3 id="c">C++</h3>
<h4 id="动态数组vector">动态数组vector</h4>
<pre><code class="language-c++">vector&lt;int&gt; num;
vector&lt;int&gt; num(3);	//默认值都是0
vector&lt;int&gt; num{1,3,5};
vector&lt;int&gt; num(n,2);	//大小为n，初始为2
vector&lt;vector&lt;int&gt;&gt; dp;
vector&lt;vector&lt;bool&gt;&gt; dp(m,vector&lt;bool&gt;(n,true));	//初始一个m*n的布尔数组，初始值全为true

reference back()	//返回数组最后一个元素的引用 int b = nums.back(); cout&lt;&lt;b;
push_back/pop_back
swap(num[0],num[1])
</code></pre>
<h4 id="字符串string">字符串string</h4>
<pre><code class="language-c++">string s;	//s为&quot;&quot;
string s = &quot;abc&quot;;

push_back(char c)/pop_back
substr(pos,len)
if(s1 == s2)	//c++判断字符串相等
</code></pre>
<h4 id="哈希表unordered_map">哈希表unordered_map</h4>
<pre><code class="language-c++">unordered_map&lt;string, vector&lt;int&gt;&gt; mapping;	//一个key为string，value为int数组的哈希表
//值可以是任意类型，键一般为int或string

size_type count(const key_type&amp; key);	//返回哈希表中key出现次数，即0/1（哈希表中键不重复）用来判断key是否存在
size_type erase(const key_type&amp; key);	//通过key清除哈希表中的键值对

//计数器
vector&lt;int&gt; nums{1,1,3,4,5,3,6};
unordered_map&lt;int, int&gt; counter;
for(int num : nums){
    counter[num]++;	//可以通过方括号直接访问或修改对应键
}

//遍历
for(auto&amp; it : counter){
    int key = it.first;
    int value = it.second;
}


//注意：用[]访问key时，若key不存在则自动创建，value为默认值
//所以上述计数器，执行过程实际为：
if(!counter.count(num)){
    //新增一个键值对num-&gt;0
    counter[num] = 0;
}
counter[num]++;
//所以有时候可能需要写key的存在判断，再执行操作
</code></pre>
<h4 id="哈希集合unordered_set">哈希集合unordered_set</h4>
<pre><code class="language-c++">unordered_set&lt;int&gt; visited;

size_type count(const key_type&amp; key)	//类似于哈希表此功能，返回0/1
pair&lt;iterator,bool&gt; insert(const key_type&amp; key)	//插入一个元素key
size_type erase(const key_type&amp; key)	//删除集合中的元素key，删除成功返回1，key不存在则返回0
</code></pre>
<p>####　队列queue与栈stack</p>
<pre><code class="language-c++">queue&lt;int&gt; q;

void push()/pop()	//c++中pop是void类型
value_type&amp; front()

stack&lt;int&gt; stk;
void push()/pop()
value_type&amp; top()
</code></pre>
<h3 id="java">Java</h3>
<h4 id="数组">数组</h4>
<pre><code class="language-java">int[] nums = new int[n];
boolean[][] visited = new boolean[m][n];
//有时要做非空判断
if(nums.length == 0)	return;
</code></pre>
<h4 id="字符串">字符串</h4>
<pre><code class="language-java">//不支持[]访问字符，要转换成char[]才可修改
char c = s1.charAt(2);
char[] chars = s1.toCharArray();
String s2 = new String(chars);
//用equals判断相等
if(s1.equals(s2)){	}

//若频繁进行拼接，可用StringBuilder
StringBuilder sb = new StringBuilder();
for(char c = 'a'; c &lt; 'f'; c++){
	sb.append(c);	
}
//append方法支持拼接字符，字符串，数字等类型
sb.append('g').append(&quot;hij&quot;).append(123);
String res = sb.toString();
</code></pre>
<h4 id="动态数组arraylist">动态数组ArrayList</h4>
<pre><code class="language-java">ArrayList&lt;Integer&gt; nums = new ArrayList&lt;&gt;();

E get(int index)
boolean add(E e)
</code></pre>
<h4 id="双链表linkedlist">双链表LinkedList</h4>
<pre><code class="language-java">LinkedList&lt;String&gt; strings = new LinkedList&lt;&gt;();

//操作头尾效率高
boolean contains(Object o)
boolean add(E e)	//尾部添加
void addFirst(E e)	//头部添加
E removeFirst()
E removeLast()
    
//若题目要求返回值为List，ArrayList和LinkedList均为List子类可以返回
</code></pre>
<h4 id="哈希表hashmap">哈希表HashMap</h4>
<pre><code class="language-java">HashMap&lt;String, int[]&gt; map = new HashMap();

boolean containsKey(Object key)	//是否存在键
V get(Object key)
V put(K key,V value)
V remove(Object key)
V getOrDefault(Object key, V defaultValue)
Set&lt;K&gt; keySet()	//获取哈希表中所有key
V putIfAbsent(K key, V value)	//如果key不存在，则存入key-value，否则什么都不做
</code></pre>
<h4 id="哈希集合hashset">哈希集合HashSet</h4>
<pre><code class="language-java">Set&lt;String&gt; set = new HashSet&lt;&gt;();
boolean add(E e)	//若不存在则添加
boolean contains(Object o)
boolean remove(Object o)
</code></pre>
<h4 id="队列queue">队列queue</h4>
<pre><code class="language-java">Queue&lt;String&gt; q = new LinkedList&lt;&gt;();	//Queue是个接口

E peek()	//返回头部元素
E poll()	//删除并返回头部元素
boolean offer(E e)	//e插入队尾
</code></pre>
<h4 id="栈stack">栈stack</h4>
<pre><code class="language-java">Stack&lt;Integer&gt; s = new Stack&lt;&gt;();

E push(E item)
E peek()	//返回栈顶元素
E pop()	//删除并返回栈顶元素
</code></pre>
<h3 id="python">Python</h3>
<pre><code class="language-python"># 列表list可以做数组，堆栈或队列
arr = [1,2,3,4]
print(arr[2])
arr.append(5)
print(arr[-1])

stack = []
#　栈顶添加
stack.append(1)
# 删除并返回栈顶
e1 = stack.pop()
# 查看栈顶
e2 = stack[-1]

# 元组和字典
memo = dict()
# 二维动态规划dp函数
def dp(i,j):
    # 元组（i，j）作为哈希表的键
    # 用in查询该键是否存在与哈希表
    if (i,j) in memo:
        return memo[(i,j)]
    memo[(i,j)] = ...
    
    return memo[(i,j)]
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Typora使用指南]]></title>
        <id>https://smart-jbs.github.io/post/typora-shi-yong-zhi-nan/</id>
        <link href="https://smart-jbs.github.io/post/typora-shi-yong-zhi-nan/">
        </link>
        <updated>2020-12-15T16:27:47.000Z</updated>
        <content type="html"><![CDATA[<p>开始写博客的时候发现，gridea文章编辑的markdown功能咋用呢？写代码的话总不能每行都用 <strong>`</strong> 来包括吧，这也太麻烦了。回去看了Gridea的教程，发现人家都是先在markdown编辑工具中写好，再直接粘贴过来。那我们就先搞定Typora吧！</p>
<h1 id="一级标题">一级标题</h1>
<h2 id="二级标题">二级标题</h2>
<h3 id="三级标题">三级标题</h3>
<h4 id="四级标题">四级标题</h4>
<h5 id="五级标题">五级标题</h5>
<h6 id="六级标题空格文字-行中按ctrl1~6">六级标题（<strong>#+空格+文字 / 行中按ctrl+1~6</strong>）</h6>
<p>------------------------------我是分割线--------------------------------</p>
<p>有序列表：</p>
<ol>
<li>打开冰箱（<strong>1+.+空格</strong>）
<ol>
<li>插电（tab降级）</li>
</ol>
</li>
<li>开机（<strong>shift+tab升级</strong>）
<ol>
<li>开门</li>
</ol>
</li>
<li>把大象放进冰箱</li>
<li>关闭冰箱（<strong>不再写列表按↓或两下回车</strong>）</li>
</ol>
<p>（<strong>三行选中后ctrl+shift+[，自动排出有序列表或撤销</strong>）</p>
<ol>
<li>开门</li>
<li>放入</li>
<li>关门</li>
</ol>
<p>------------------------------我是分割线--------------------------------</p>
<p>无序链表：</p>
<ul>
<li>青菜（*<strong>/- + 空格 + 文字</strong>）</li>
<li>水果
<ol>
<li>苹果（<strong>tab降级</strong>）</li>
<li>梨（<strong>ctrl+shift+[ 变成有序列表</strong>）</li>
<li>菠萝
<ul>
<li>国产菠萝（<strong>两行选中后ctrl+shift+]，自动排出无序列表</strong>）</li>
<li>进口菠萝</li>
</ul>
</li>
</ol>
</li>
<li>肉</li>
</ul>
<p>------------------------------我是分割线--------------------------------</p>
<p>任务列表：</p>
<ul class="contains-task-list">
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1599715"> 任务1（<strong>-+空格+[+空格+]+空格，要是英文模式的[]</strong><label class="task-list-item-label" for="task-item-1599715"> 任务1（**-+空格+[+空格+]+空格，要是英文模式的[]**）</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5639298"> 任务2（<strong>或者选择，点击段落-任务列表</strong><label class="task-list-item-label" for="task-item-5639298"> 任务2（**或者选择，点击段落-任务列表**）</label></p>
</li>
</ul>
<p>------------------------------我是分割线--------------------------------</p>
<p>表头：<strong>|文字|文字|+回车</strong></p>
<p>表身：<strong>直接按回车会跳出表格，ctrl+回车是添加一行；其他操作</strong></p>
<p><strong>ctrl+t 创建表格</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">学号</th>
<th style="text-align:center">姓名</th>
<th></th>
<th style="text-align:right">性别</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">001</td>
<td style="text-align:center">张三</td>
<td></td>
<td style="text-align:right">男</td>
</tr>
</tbody>
</table>
<p>------------------------------我是分割线--------------------------------</p>
<p>行内代码：</p>
<p><code>行内代码</code>  用 `</p>
<p>或者<strong>ctrl+shift+`</strong></p>
<p>------------------------------我是分割线--------------------------------</p>
<p>代码块：</p>
<p><strong>3个`+java或者3个~+java或者ctrl+shift+k</strong></p>
<pre><code class="language-java">public static void main(String[] args){
    System.out.println(&quot;hello world&quot;);
}
</code></pre>
<pre><code class="language-c++">int n = 10;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2020.12.14]]></title>
        <id>https://smart-jbs.github.io/post/20201214/</id>
        <link href="https://smart-jbs.github.io/post/20201214/">
        </link>
        <updated>2020-12-14T02:50:50.000Z</updated>
        <content type="html"><![CDATA[<p>准备开始更新博客啦😛<br>
<code>string str = &quot;hello world&quot;;</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://smart-jbs.github.io/post/hello-gridea/</id>
        <link href="https://smart-jbs.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>